generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  // url      = env("DATABASE_URL")
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text

  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?
  password      String?
  avatarUrl     String?
  avatarId      String?
  role      String?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ship {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  imoNumber String @unique
  name      String
  type      String
  flag      String
  grt       Int
  dwt       Int
  hp        Int
  callSign  String
  yearBuilt Int
  createdBy String
}

model TravelDocument {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type          String?
  number        String?   @unique
  issued        DateTime?
  expired       DateTime?
  placeOfIssued String?
  name          String?
  surName       String?
  fileId        String?
  fileUrl       String?

  Crew   Crew?   @relation(fields: [crewId], references: [id])
  crewId String?

  @@index([crewId])
}

model SeamanBook {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type          String?
  number        String?   @unique
  issued        DateTime?
  expired       DateTime?
  placeOfIssued String?
  name          String?
  surName       String?
  fileId        String?
  fileUrl       String?

  Crew   Crew?   @relation(fields: [crewId], references: [id])
  crewId String?

  @@index([crewId])
}

model Crew {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status          String?
  givenName       String?
  surName         String?
  pob             String?
  dob             DateTime?
  idNumber        String?   @unique
  phoneNumber     String?
  homeAddress     String?
  maritalStatus   String?
  religion        String?
  nextOfKin       String?
  relation        String?
  emergencyNumber String?
  height          Int?
  weight          Int?
  coverall        String?
  shoeSize        Int?
  mothersName     String?
  fathersName     String?
  imageUrl        String?
  imageId         String?

  mainRank       String?
  prevVesselType String?
  englishSkills  String?

  travelDocuments TravelDocument[]
  seamanBooks     SeamanBook[]

  createdBy      String?
}
